# -*- coding: utf-8 -*-
"""GROUPDTSA3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VLQRF2ySgeXQ4etLofRgqJLDVRfTEC1S

# Analisis Faktor-faktor yang Berhubungan dengan Emisi CO2 di Seluruh Dunia

Mempersiapkan *environment* untuk melakukan analisa data
"""

import os
os.environ['KAGGLE_CONFIG_DIR'] = '/content'

!kaggle datasets download -d anshtanwar/global-data-on-sustainable-energy

'chmod 600 /content/kaggle.json'

import pandas as pd

import plotly.express as px

"""cara mengubah *dataset* format **zip** ke format **csv** : !unzip \*.zip && rm * .zip

"""

df = pd.read_csv('global-data-sustainable-energy .csv')
df

"""informasi dataset muncul

"""

df.shape

df.head(200)

"""# Exploring the Connection: Does **CO2** Emission Correlate with a Nation's **Land** **Area**?"""

land_data = df[['Entity', 'Land Area(Km2)']]
land_data.head(100)

land_data.info()

""" Mengecek apakah ada value yang bernilai ***null*** pada data kita."""

land_data.isnull().sum()

land_data_dropped = land_data.dropna(axis=0)

land_data_dropped.info()

land_data_dropped.isnull().sum()

land_data_dropped.shape

"""Mengambil informasi tentang region ( nation) dalam DataFrame

"""

regions = land_data_dropped['Entity'].unique()
regions

"""Mengubah Tipe data dari Land Area Yaitu *Object*"""

# Gets every value of Land Area
land = land_data_dropped['Land Area(Km2)'].unique()

# New list for land area as int type
land_int = []

# Iterates through every value in land, convert it to a string and handle decimals
for num in land:
    num_str = str(num)  # Convert the value to a string
    if '.' in num_str:  # Check if the string contains a decimal point
        int_part, _ = num_str.split('.')  # Split at the decimal point and take the integer part
        land_int.append(int(int_part))  # Convert and append the integer value
    else:
        land_int.append(int(num_str))  # If there's no decimal, directly convert and append

# Now land_int contains the land areas as integers without commas or decimals

"""Menaruh kembali ***region*** dan ***land*** are kita kedalam DataFrame"""

land_data_dropped_df = pd.DataFrame([regions, pd.to_numeric(land_int)], index=['Regions', 'Land'])


land_data_dropped_df = land_data_dropped_df.T

land_data_dropped_df.head()

land_data_dropped_df = pd.DataFrame([regions, pd.to_numeric(land_int)], index=['Regions', 'Land'])


land_data_dropped_df = land_data_dropped_df.T

sorted_land_data = land_data_dropped_df.sort_values(by='Land', ascending=False)


top_10_regions = sorted_land_data.head(10)
print(top_10_regions)

land_data_dropped_df.shape
land_data_dropped_df.info()

# Creates a graph called graph
graph = px.bar(land_data_dropped_df, x='Regions', y='Land', labels={'Land': 'Land Area - km2', 'Entity': 'Regions'})

# Updates graph layout/styles
graph.update_layout(title={
    'text': 'Countries Land Area - in km2',
    'x': 0.5,
})

graph.show()

"""Kita akan mencari seberapa besar emisi yang dihasilan dari 5 negara terbesar

"""

emissions_co2_data = df[['Entity', 'Year', 'Value_co2_emissions_kt_by_country']].rename(columns={'Value_co2_emissions_kt_by_country': 'co2'})

emissions_co2_data.isnull().sum()

emissions_co2_data.info()

"""values yang hilang akan kita drop

"""

emissions_co2_data = emissions_co2_data.dropna(axis=0)

"""Memisahkan tiap region(countries) dalam dataframe yang berbeda untuk melakukan plot pada setiap graph"""

# Canada
canada_emissions_co2_data= emissions_co2_data[(emissions_co2_data['Entity'] == 'Canada')].dropna()

# United States
united_states_emissions_co2_data = emissions_co2_data[(emissions_co2_data['Entity'] == 'United States')].dropna()

# China
china_emissions_co2_data = emissions_co2_data[(emissions_co2_data['Entity'] == 'China')].dropna()

# Brazil
brazil_emissions_co2_data = emissions_co2_data[(emissions_co2_data['Entity'] == 'Brazil')].dropna()

# Australia
autralia_emissions_co2_data = emissions_co2_data[(emissions_co2_data['Entity'] == 'Australia')].dropna()

"""Melakukan plotting kepada 5 *negara* terbesar berdasarkan besaran(values) emisi"""

# Imports important packages from plotly
from plotly.subplots import make_subplots
import plotly.graph_objects as go

# Create individual subplots
subplot_canada = go.Figure()
subplot_canada.add_trace(go.Bar(x=canada_emissions_co2_data['Year'], y=canada_emissions_co2_data['co2']))
subplot_canada.update_layout(title_text='Canada')

subplot_us = go.Figure()
subplot_us.add_trace(go.Bar(x=united_states_emissions_co2_data['Year'], y=united_states_emissions_co2_data['co2']))
subplot_us.update_layout(title_text='United States')

subplot_china = go.Figure()
subplot_china.add_trace(go.Bar(x=china_emissions_co2_data['Year'], y=china_emissions_co2_data['co2']))
subplot_china.update_layout(title_text='China')

subplot_brazil = go.Figure()
subplot_brazil.add_trace(go.Bar(x=brazil_emissions_co2_data['Year'], y=brazil_emissions_co2_data['co2']))
subplot_brazil.update_layout(title_text='Brazil')

subplot_australia = go.Figure()
subplot_australia.add_trace(go.Bar(x=autralia_emissions_co2_data['Year'], y=autralia_emissions_co2_data['co2']))
subplot_australia.update_layout(title_text='Australia')

# Arrange the subplots using make_subplots
graph = make_subplots(
    rows=2, cols=3,
    subplot_titles=('Canada', 'United States', 'China', 'Brazil', 'Australia')
)

graph.add_trace(subplot_canada.data[0], row=1, col=1)
graph.add_trace(subplot_us.data[0], row=1, col=2)
graph.add_trace(subplot_china.data[0], row=1, col=3)
graph.add_trace(subplot_brazil.data[0], row=2, col=1)
graph.add_trace(subplot_australia.data[0], row=2, col=2)

# Updates subplot layout
graph.update_layout(height=800, width=1000, showlegend=False, title={
    'text': 'CO2 emission - in kiloton - by the five biggest countries in the world, per year',
    'x': 0.5
})

# Shows subplot
graph.show()

"""# Emisi CO2 dan Dukungan Keuangan Internasional untuk Energi Bersih"""

financial = df[['Entity', 'Year', 'Financial flows to developing countries (US $)']]

financial_flowdata_2017 = financial[(financial['Year'] == 2017)].dropna()

fig_financial_data_2017 = px.bar(financial_flowdata_2017, x='Entity', y='Financial flows to developing countries (US $)')

fig_financial_data_2017.update_layout(title={
    'text': 'International finance received for clean energy in USD per country',
    'x': 0.5
})

fig_financial_data_2017.show()